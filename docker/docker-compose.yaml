version: "3.9"
name: vuta
services:
  postgres:
    image: postgres:15-alpine
    command: [ "postgres", "-c", "wal_level=logical" ]
    environment:
      - POSTGRES_PASSWORD=zjLY39YKviD4Zpmu
    volumes:
      - ./init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      - ./pgdata:/var/lib/postgresql/data

  rabbitmq:
    image: vuta/rabbitmq
    build:
      context: .
      dockerfile: rabbitmq.Dockerfile
    volumes:
      - './rmqdata:/var/lib/rabbitmq/mnesia/'

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    # 8.x
    environment: 
      - 'ES_JAVA_OPTS=-Xms512M -Xmx512M'
      - 'bootstrap.memory_lock=true'
      - 'discovery.type=single-node'
      - 'xpack.security.enabled=false'
      - 'xpack.security.enrollment.enabled=false'
    
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    environment:
      XPACK_APM_SERVICEMAPENABLED: "true"
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: d1a66dfd-c4d3-4a0a-8290-2abcb83ab3aa
      LOGGING_ROOT_LEVEL: error
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    ports:
      - 56011:5601

  api:
    image: vuta/api
    build:
      context: ../
      dockerfile: VUta.Api/Dockerfile
    restart: unless-stopped
    volumes:
      - ./appsettings.api.json:/app/appsettings.Production.json
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - 8800:80

  worker:
    image: vuta/worker
    build:
      context: ../
      dockerfile: VUta.Worker/Dockerfile
    restart: unless-stopped
    volumes:
      - ./appsettings.worker.json:/app/appsettings.Production.json
    depends_on:
      - postgres
      - rabbitmq

  es-indexer:
    image: vuta/es-indexer
    build:
      context: ../
      dockerfile: VUta.ESIndexer/Dockerfile
    restart: unless-stopped
    volumes:
      - ./appsettings.es-indexer.json:/app/appsettings.Production.json
    depends_on:
      - postgres

  tunnel:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel run --token ${CF_TOKEN}